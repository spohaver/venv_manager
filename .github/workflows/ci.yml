name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to test against latest Python versions
    - cron: '0 0 * * 0'
  workflow_dispatch: # Allow manual triggers

jobs:
  # Job to dynamically determine Python versions
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Get latest Python versions
      id: set-matrix
      run: |
        # Get the latest 3 stable Python versions from GitHub API
        curl -s https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json | \
        python3 -c "
        import json, sys
        data = json.load(sys.stdin)
        
        # Get only stable versions, group by major.minor, get latest patch for each
        versions = {}
        for item in data:
            if item.get('stable', False):
                version = item['version']
                # Skip very old versions and pre-releases
                if version.startswith(('3.1', '3.2', '3.3', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9')):
                    continue
                if 'rc' in version or 'alpha' in version or 'beta' in version:
                    continue
                    
                major_minor = '.'.join(version.split('.')[:2])
                if major_minor not in versions or version > versions[major_minor]:
                    versions[major_minor] = version
        
        # Get the latest 3 versions
        latest_versions = sorted(versions.values(), reverse=True)[:3]
        matrix = {'python-version': latest_versions}
        print(f'matrix={json.dumps(matrix)}')
        " >> $GITHUB_OUTPUT

  test:
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.get-python-versions.outputs.matrix)}}
      fail-fast: false # Continue testing other versions if one fails

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        if [ -f setup.py ]; then pip install -e .; fi
    
    - name: Lint with flake8
      run: |
        flake8 *.py tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 *.py tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check *.py tests/
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term
    
    - name: Test script functionality
      run: |
        # Test help command
        ./venv-manager --help
        
        # Test basic functionality
        ./venv-manager list || echo "No environments found (expected)"
        
        # Create a test environment
        ./venv-manager --name ci-test-env --verbose
        
        # Verify it was created
        ./venv-manager list | grep "ci-test-env"
        
        # Test venv_shell creation
        if [ -f "./venv_shell" ]; then
          echo "✓ venv_shell activation script created successfully"
        else
          echo "✗ venv_shell activation script not found"
          exit 1
        fi
        
        # Clean up test environment
        ./venv-manager remove --name ci-test-env --force
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'  # Only upload once
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Summary job for branch protection
  test-summary:
    if: always()
    needs: [get-python-versions, test]
    runs-on: ubuntu-latest
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✓ All tests passed!"
        else
          echo "✗ Tests failed!"
          exit 1
        fi